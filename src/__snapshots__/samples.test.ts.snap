// Vitest Snapshot v1

exports[`samples-generator > ./samples/v3.0/api-with-examples.yaml 1`] = `
"import { Zodios } from "@zodios/core";
import { z } from "zod";

const variables = {};

const endpoints = [] as const;

export const api = new Zodios("__baseurl__", endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/callback-example.yaml 1`] = `
"import { Zodios } from "@zodios/core";
import { z } from "zod";

const variables = {};

const endpoints = [] as const;

export const api = new Zodios("__baseurl__", endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/link-example.yaml 1`] = `
"import { Zodios } from "@zodios/core";
import { z } from "zod";

const vObntp1skbx = z.object({ username: z.string(), uuid: z.string() }).partial();
const vZj8Kquc5yX = z.object({ slug: z.string(), owner: vObntp1skbx }).partial();
const vDuiOz9DMZ7 = z
    .object({ id: z.number(), title: z.string(), repository: vZj8Kquc5yX, author: vObntp1skbx })
    .partial();
const vKMFj5kanr5 = z.array(vZj8Kquc5yX);
const vt4Y3jGvjMM = z.enum(["open", "merged", "declined"]).optional();
const vSgadMZDVXI = z.array(vDuiOz9DMZ7);

const variables = {
    getPullRequestsById: vDuiOz9DMZ7,
    getPullRequestsByRepository: vSgadMZDVXI,
    getRepositoriesByOwner: vKMFj5kanr5,
    getRepository: vZj8Kquc5yX,
    getUserByName: vObntp1skbx,
    pullrequest: vDuiOz9DMZ7,
    repository: vZj8Kquc5yX,
    state: vt4Y3jGvjMM,
    user: vObntp1skbx,
};

const endpoints = [
    {
        method: "get",
        path: "/2.0/repositories/:username",
        requestFormat: "json",
        response: z.array(variables["getRepository"]),
    },
    {
        method: "get",
        path: "/2.0/repositories/:username/:slug",
        requestFormat: "json",
        response: variables["repository"],
    },
    {
        method: "get",
        path: "/2.0/repositories/:username/:slug/pullrequests",
        requestFormat: "json",
        parameters: [
            {
                name: "state",
                type: "Query",
                schema: variables["state"],
            },
        ],
        response: z.array(variables["getPullRequestsById"]),
    },
    {
        method: "get",
        path: "/2.0/repositories/:username/:slug/pullrequests/:pid",
        requestFormat: "json",
        response: variables["pullrequest"],
    },
    {
        method: "get",
        path: "/2.0/users/:username",
        requestFormat: "json",
        response: variables["user"],
    },
] as const;

export const api = new Zodios("__baseurl__", endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/petstore.yaml 1`] = `
"import { Zodios } from "@zodios/core";
import { z } from "zod";

const vz089ZHJr6H = z.object({ id: z.number(), name: z.string(), tag: z.string().optional() });
const vvHrKrAZzfP = z.array(vz089ZHJr6H);
const vusbpdVpqWm = z.object({ code: z.number(), message: z.string() });

const variables = {
    Error: vusbpdVpqWm,
    Pet: vz089ZHJr6H,
    Pets: vvHrKrAZzfP,
    createPets: vusbpdVpqWm,
    listPets: vusbpdVpqWm,
    showPetById: vusbpdVpqWm,
};

const endpoints = [
    {
        method: "get",
        path: "/pets",
        requestFormat: "json",
        parameters: [
            {
                name: "limit",
                type: "Query",
                schema: z.number().optional(),
            },
        ],
        response: variables["Pets"],
    },
    {
        method: "post",
        path: "/pets",
        requestFormat: "json",
        response: variables["Error"],
    },
    {
        method: "get",
        path: "/pets/:petId",
        requestFormat: "json",
        response: variables["Pet"],
    },
] as const;

export const api = new Zodios("__baseurl__", endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/petstore-expanded.yaml 1`] = `
"import { Zodios } from "@zodios/core";
import { z } from "zod";

const vPXNN6VHlNv = z.object({ name: z.string(), tag: z.string().optional() });
const vwtihe8QpJQ = vPXNN6VHlNv.and(z.object({ id: z.number() }));
const vGqL1kemtHF = z.array(z.string()).optional();
const vDdKrvyZ9gt = z.array(vwtihe8QpJQ);
const vusbpdVpqWm = z.object({ code: z.number(), message: z.string() });

const variables = {
    Error: vusbpdVpqWm,
    Pet: vwtihe8QpJQ,
    addPet: vusbpdVpqWm,
    addPet_Body: vPXNN6VHlNv,
    deletePet: vusbpdVpqWm,
    findPets: vusbpdVpqWm,
    find_pet_by_id: vusbpdVpqWm,
    tags: vGqL1kemtHF,
};

const endpoints = [
    {
        method: "get",
        path: "/pets",
        description: \`Returns all pets from the system that the user has access to
Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.

Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
\`,
        requestFormat: "json",
        parameters: [
            {
                name: "tags",
                type: "Query",
                schema: variables["tags"],
            },
            {
                name: "limit",
                type: "Query",
                schema: z.number().optional(),
            },
        ],
        response: z.array(variables["Pet"]),
    },
    {
        method: "post",
        path: "/pets",
        description: \`Creates a new pet in the store. Duplicates are allowed\`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                description: \`Pet to add to the store\`,
                type: "Body",
                schema: variables["addPet_Body"],
            },
        ],
        response: variables["Pet"],
    },
    {
        method: "get",
        path: "/pets/:id",
        description: \`Returns a user based on a single ID, if the user does not have access to the pet\`,
        requestFormat: "json",
        response: variables["Pet"],
    },
    {
        method: "delete",
        path: "/pets/:id",
        description: \`deletes a single pet based on the ID supplied\`,
        requestFormat: "json",
        response: variables["Error"],
    },
] as const;

export const api = new Zodios("__baseurl__", endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/uspto.yaml 1`] = `
"import { Zodios } from "@zodios/core";
import { z } from "zod";

const vIEeBL2OSmC = z
    .object({
        total: z.number(),
        apis: z.array(
            z
                .object({
                    apiKey: z.string(),
                    apiVersionNumber: z.string(),
                    apiUrl: z.string(),
                    apiDocumentationUrl: z.string(),
                })
                .partial()
        ),
    })
    .partial();
const vlyQvttKNVV = z.array(z.record(z.object({}).partial()));

const variables = {
    dataSetList: vIEeBL2OSmC,
    list_data_sets: vIEeBL2OSmC,
    perform_search: vlyQvttKNVV,
};

const endpoints = [
    {
        method: "get",
        path: "/",
        requestFormat: "json",
        response: variables["dataSetList"],
    },
    {
        method: "get",
        path: "/:dataset/:version/fields",
        description: \`This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the &#x27;fields&#x27; attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.\`,
        requestFormat: "json",
        response: z.string(),
    },
    {
        method: "post",
        path: "/:dataset/:version/records",
        description: \`This API is based on Solr/Lucene Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the &#x27;fields&#x27; attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.\`,
        requestFormat: "json",
        response: z.array(z.record(z.object({}).partial())),
    },
] as const;

export const api = new Zodios("__baseurl__", endpoints);
"
`;

exports[`samples-generator > ./samples/v3.1/non-oauth-scopes.yaml 1`] = `
"import { Zodios } from "@zodios/core";
import { z } from "zod";

const variables = {};

const endpoints = [] as const;

export const api = new Zodios("__baseurl__", endpoints);
"
`;

exports[`samples-generator > ./samples/v3.1/webhook-example.yaml 1`] = `
"import { Zodios } from "@zodios/core";
import { z } from "zod";

const variables = {};

const endpoints = [] as const;

export const api = new Zodios("__baseurl__", endpoints);
"
`;
