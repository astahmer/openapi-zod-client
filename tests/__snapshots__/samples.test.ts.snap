// Vitest Snapshot v1

exports[`samples-generator > ./samples/v3.0/api-with-examples.yaml 1`] = `
"import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

const endpoints = makeApi([]);

export const api = new Zodios(endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/callback-example.yaml 1`] = `
"import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

const endpoints = makeApi([]);

export const api = new Zodios(endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/link-example.yaml 1`] = `
"import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

const user = z.object({ username: z.string(), uuid: z.string() }).partial();
const repository = z.object({ slug: z.string(), owner: user }).partial();
const pullrequest = z
    .object({ id: z.number().int(), title: z.string(), repository: repository, author: user })
    .partial();

const endpoints = makeApi([
    {
        method: "get",
        path: "/2.0/repositories/:username",
        requestFormat: "json",
        parameters: [
            {
                name: "username",
                type: "Path",
                schema: z.string(),
            },
        ],
        response: z.array(repository),
    },
    {
        method: "get",
        path: "/2.0/repositories/:username/:slug",
        requestFormat: "json",
        parameters: [
            {
                name: "username",
                type: "Path",
                schema: z.string(),
            },
            {
                name: "slug",
                type: "Path",
                schema: z.string(),
            },
        ],
        response: repository,
    },
    {
        method: "get",
        path: "/2.0/repositories/:username/:slug/pullrequests",
        requestFormat: "json",
        parameters: [
            {
                name: "username",
                type: "Path",
                schema: z.string(),
            },
            {
                name: "slug",
                type: "Path",
                schema: z.string(),
            },
            {
                name: "state",
                type: "Query",
                schema: z.enum(["open", "merged", "declined"]).optional(),
            },
        ],
        response: z.array(pullrequest),
    },
    {
        method: "get",
        path: "/2.0/repositories/:username/:slug/pullrequests/:pid",
        requestFormat: "json",
        parameters: [
            {
                name: "username",
                type: "Path",
                schema: z.string(),
            },
            {
                name: "slug",
                type: "Path",
                schema: z.string(),
            },
            {
                name: "pid",
                type: "Path",
                schema: z.string(),
            },
        ],
        response: pullrequest,
    },
    {
        method: "get",
        path: "/2.0/users/:username",
        requestFormat: "json",
        parameters: [
            {
                name: "username",
                type: "Path",
                schema: z.string(),
            },
        ],
        response: user,
    },
]);

export const api = new Zodios(endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/petstore.yaml 1`] = `
"import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

const Pet = z.object({ id: z.number().int(), name: z.string(), tag: z.string().optional() });
const Pets = z.array(Pet);
const Error = z.object({ code: z.number().int(), message: z.string() });

const endpoints = makeApi([
    {
        method: "get",
        path: "/pets",
        requestFormat: "json",
        parameters: [
            {
                name: "limit",
                type: "Query",
                schema: z.number().int().optional(),
            },
        ],
        response: z.array(Pet),
    },
    {
        method: "post",
        path: "/pets",
        requestFormat: "json",
        response: Error,
    },
    {
        method: "get",
        path: "/pets/:petId",
        requestFormat: "json",
        parameters: [
            {
                name: "petId",
                type: "Path",
                schema: z.string(),
            },
        ],
        response: Pet,
    },
]);

export const api = new Zodios(endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/petstore-expanded.yaml 1`] = `
"import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

const NewPet = z.object({ name: z.string(), tag: z.string().optional() });
const Pet = NewPet.and(z.object({ id: z.number().int() }));
const Error = z.object({ code: z.number().int(), message: z.string() });

const endpoints = makeApi([
    {
        method: "get",
        path: "/pets",
        description: \`Returns all pets from the system that the user has access to
Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.

Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
\`,
        requestFormat: "json",
        parameters: [
            {
                name: "tags",
                type: "Query",
                schema: z.array(z.string()).optional(),
            },
            {
                name: "limit",
                type: "Query",
                schema: z.number().int().optional(),
            },
        ],
        response: z.array(Pet),
    },
    {
        method: "post",
        path: "/pets",
        description: \`Creates a new pet in the store. Duplicates are allowed\`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                description: \`Pet to add to the store\`,
                type: "Body",
                schema: NewPet,
            },
        ],
        response: Pet,
    },
    {
        method: "get",
        path: "/pets/:id",
        description: \`Returns a user based on a single ID, if the user does not have access to the pet\`,
        requestFormat: "json",
        parameters: [
            {
                name: "id",
                type: "Path",
                schema: z.number().int(),
            },
        ],
        response: Pet,
    },
    {
        method: "delete",
        path: "/pets/:id",
        description: \`deletes a single pet based on the ID supplied\`,
        requestFormat: "json",
        parameters: [
            {
                name: "id",
                type: "Path",
                schema: z.number().int(),
            },
        ],
        response: Error,
    },
]);

export const api = new Zodios(endpoints);
"
`;

exports[`samples-generator > ./samples/v3.0/uspto.yaml 1`] = `
"import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

const dataSetList = z
    .object({
        total: z.number().int(),
        apis: z.array(
            z
                .object({
                    apiKey: z.string(),
                    apiVersionNumber: z.string(),
                    apiUrl: z.string(),
                    apiDocumentationUrl: z.string(),
                })
                .partial()
        ),
    })
    .partial();
const perform_search_Body = z.object({
    criteria: z.string().default("*:*"),
    start: z.number().int().optional(),
    rows: z.number().int().optional().default(100),
});

const endpoints = makeApi([
    {
        method: "get",
        path: "/",
        requestFormat: "json",
        response: dataSetList,
    },
    {
        method: "get",
        path: "/:dataset/:version/fields",
        description: \`This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the &#x27;fields&#x27; attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.\`,
        requestFormat: "json",
        parameters: [
            {
                name: "dataset",
                type: "Path",
                schema: z.string(),
            },
            {
                name: "version",
                type: "Path",
                schema: z.string(),
            },
        ],
        response: z.string(),
        errors: [
            {
                status: 404,
                description: \`The combination of dataset name and version is not found in the system or it is not published yet to be consumed by public.\`,
                schema: z.string(),
            },
        ],
    },
    {
        method: "post",
        path: "/:dataset/:version/records",
        description: \`This API is based on Solr/Lucene Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the &#x27;fields&#x27; attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.\`,
        requestFormat: "form-url",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: perform_search_Body,
            },
            {
                name: "version",
                type: "Path",
                schema: z.string().default("v1"),
            },
            {
                name: "dataset",
                type: "Path",
                schema: z.string().default("oa_citations"),
            },
        ],
        response: z.array(z.record(z.object({}).partial())),
        errors: [
            {
                status: 404,
                description: \`No matching record found for the given criteria.\`,
                schema: z.void(),
            },
        ],
    },
]);

export const api = new Zodios(endpoints);
"
`;

exports[`samples-generator > ./samples/v3.1/non-oauth-scopes.yaml 1`] = `
"import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

const endpoints = makeApi([]);

export const api = new Zodios(endpoints);
"
`;

exports[`samples-generator > ./samples/v3.1/webhook-example.yaml 1`] = `
"import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

const endpoints = makeApi([]);

export const api = new Zodios(endpoints);
"
`;
